terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_iam_policy_document.github_actions_assume_role_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "github_actions_assume_role_policy" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions = [
              + "sts:AssumeRoleWithWebIdentity",
            ]
          + effect  = "Allow"

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "sts.amazonaws.com",
                ]
              + variable = "token.actions.githubusercontent.com:aud"
            }
          + condition {
              + test     = "StringLike"
              + values   = [
                  + "repo:Val-d-emar/rsschool-devops-course-tasks:*",
                ]
              + variable = "token.actions.githubusercontent.com:sub"
            }

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "Federated"
            }
        }
    }

  # aws_iam_openid_connect_provider.github_actions_oidc_provider will be created
  + resource "aws_iam_openid_connect_provider" "github_actions_oidc_provider" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags            = {
          + "Name" = "GitHubActions-OIDC-Provider"
        }
      + tags_all        = {
          + "Name" = "GitHubActions-OIDC-Provider"
        }
      + thumbprint_list = [
          + "2b18947a6a9fc7764fd8b5fb18a863b0c6dac24f",
        ]
      + url             = "https://token.actions.githubusercontent.com"
    }

  # aws_iam_role.github_actions_role will be created
  + resource "aws_iam_role" "github_actions_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + description           = "IAM role for GitHub Actions to deploy AWS resources"
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "GithubActionsRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Name" = "GithubActionsRole"
        }
      + tags_all              = {
          + "Name" = "GithubActionsRole"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.ec2_full_access will be created
  + resource "aws_iam_role_policy_attachment" "ec2_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
      + role       = "GithubActionsRole"
    }

  # aws_iam_role_policy_attachment.eventbridge_full_access will be created
  + resource "aws_iam_role_policy_attachment" "eventbridge_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess"
      + role       = "GithubActionsRole"
    }

  # aws_iam_role_policy_attachment.iam_full_access will be created
  + resource "aws_iam_role_policy_attachment" "iam_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/IAMFullAccess"
      + role       = "GithubActionsRole"
    }

  # aws_iam_role_policy_attachment.route53_full_access will be created
  + resource "aws_iam_role_policy_attachment" "route53_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonRoute53FullAccess"
      + role       = "GithubActionsRole"
    }

  # aws_iam_role_policy_attachment.s3_full_access will be created
  + resource "aws_iam_role_policy_attachment" "s3_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      + role       = "GithubActionsRole"
    }

  # aws_iam_role_policy_attachment.sqs_full_access will be created
  + resource "aws_iam_role_policy_attachment" "sqs_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
      + role       = "GithubActionsRole"
    }

  # aws_iam_role_policy_attachment.vpc_full_access will be created
  + resource "aws_iam_role_policy_attachment" "vpc_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonVPCFullAccess"
      + role       = "GithubActionsRole"
    }

  # aws_s3_bucket.terraform_state will be created
  + resource "aws_s3_bucket" "terraform_state" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "mybucketterraformname0"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "DevOpsCourse-Bootstrap"
          + "Name"        = "TerraformStateBucket"
        }
      + tags_all                    = {
          + "Environment" = "DevOpsCourse-Bootstrap"
          + "Name"        = "TerraformStateBucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_public_access_block.terraform_state_public_access will be created
  + resource "aws_s3_bucket_public_access_block" "terraform_state_public_access" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_server_side_encryption_configuration.terraform_state_encryption will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "terraform_state_encryption" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm     = "AES256"
                # (1 unchanged attribute hidden)
            }
        }
    }

  # aws_s3_bucket_versioning.terraform_state_versioning will be created
  + resource "aws_s3_bucket_versioning" "terraform_state_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

